# -*- Python -*-

def template():
    from pythia.pyre.schedulers import BatchScriptTemplate

    class SGEBatchScriptTemplate(BatchScriptTemplate):

        def __init__(self):
            BatchScriptTemplate.__init__(self, "sge")

        def render(self):
            from io import StringIO

            out = StringIO()
            scheduler = self.scheduler
            job = self.job

            out.write("#!%s\n" % scheduler.shell)
            out.write("#$ -S %s\n" % scheduler.shell)
            out.write("#$ -cwd\n")
            out.write("#$ -N %s\n" % job.task)
            if job.queue:
                out.write("#$ -q %s\n" % job.queue)
            if max(job.walltime):
                out.write("#$ -l h_rt=%d:%02d:%02d\n" % job.walltime[0:3])
            out.write("#$ -pe %s %s\n" % (scheduler.peName, eval(scheduler.peNumber, dict(n = job.nodes))))
            if job.stdout:
                out.write("#$ -o %s\n" % job.stdout)
            if job.stderr:
                out.write("#$ -e %s\n" % job.stderr)
            for option in scheduler.qsubOptions:
                out.write("#$ %s\n" % option)
            out.write("\n")
            out.write("%s %s \n" % (job.executable, ' '.join(job.arguments)))
            out.write("\n")
            if job.comments:
                out.write("# ~~~~ comments ~~~~\n")
                for line in job.comments:
                    out.write("# %s\n" % line)
            out.write("\n")
            out.write("# ~~~~ submit command ~~~~\n")
            out.write("# %s < [script]\n" % scheduler.command)

            return out.getvalue()

    return SGEBatchScriptTemplate()
