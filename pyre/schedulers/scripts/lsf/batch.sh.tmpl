## -*- sh -*-
#compiler-settings
directiveStartToken = @
#end compiler-settings
@from pyre.schedulers import BatchScriptTemplate
@extends BatchScriptTemplate
@implements respond
@set $self.substitutions = {'job.id': "%J"}
#!${scheduler.shell}
#BSUB -J ${job.task}
@if $job.queue
#BSUB -q ${job.queue}
@end if
@if max($job.walltime)
#BSUB -W @echo ("%d:%02d" % $job.walltime[0:2])
@end if
#BSUB -n ${job.nodes}
@if $self.stdin
#BSUB -i ${self.stdin}
@end if
@if $self.stdout
#BSUB -o ${self.stdout}
@end if
@if $self.stderr
#BSUB -e ${self.stderr}
@end if
@for direction, localPathname, remoteFilename in $self.stagedFiles
@if $direction == "in"
#BSUB -f "${localPathname} > ${remoteFilename}"
@else if $direction == "out"
#BSUB -f "${localPathname} < ${remoteFilename}"
@else
@raise RuntimeError("LSF doesn't understand the stage direction '%s'" % $direction)
@end if
@end for
@for option in $scheduler.bsubOptions
#BSUB ${option}
@end for

@set $self.substitutions = {'job.id': "${LSB_JOBID}"}

${job.executable} @echo ' '.join($job.arguments)

# submit with:
# ${scheduler.batchCommand} < [script]
